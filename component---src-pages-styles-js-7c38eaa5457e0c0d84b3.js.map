{"version":3,"sources":["webpack:///./src/pages/styles.js"],"names":["StylesPage","title","description","pt","_","md","space","dividers","size","maxWidth","as","href","target","rel","fontWeight","color","width","to","p","bg"],"mappings":"2FAAA,oEA6HeA,UA9GI,kBACjB,8BACE,YAAC,IAAD,CACEC,MAAM,iCACNC,YAAY,6MAGd,YAAC,IAAD,CAASC,GAAI,CAAEC,EAAG,WAAYC,GAAI,aAChC,YAAC,IAAD,CAAQC,MAAO,CAAEF,EAAG,WAAYC,GAAI,YAAcE,UAAU,GAC1D,YAAC,IAAD,CAASC,KAAM,KAAf,UACA,YAAC,IAAD,CAAWA,KAAM,IAAKC,SAAU,KAAhC,uDACuD,IACrD,YAAC,IAAD,CACEC,GAAG,IACHC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBACJC,WAAY,IACZC,MAAM,iBANR,WAFF,kRAiBA,YAAC,IAAD,CAAST,MAAM,YACb,YAAC,IAAD,CAAQU,MAAO,CAAEZ,EAAG,EAAOC,GAAI,KAC7B,YAAC,IAAD,CAAQC,MAAM,YACZ,YAAC,IAAD,CAASE,KAAM,KAAf,YACA,YAAC,IAAD,CAAWA,KAAM,IAAKC,SAAU,IAAWM,MAAM,YAAjD,4EAEW,kCAFX,uJAI4D,IAC1D,6DALF,wEAMqD,IACnD,YAAC,IAAD,CACEL,GAAG,IACHC,KAAK,gFACLC,OAAO,SACPC,IAAI,sBACJC,WAAY,IACZC,MAAM,iBANR,qCAPF,OAqBJ,YAAC,IAAD,CAAQC,MAAO,CAAEZ,EAAG,EAAOC,GAAI,KAC7B,YAAC,IAAD,CAAQC,MAAM,YACZ,YAAC,IAAD,CAASE,KAAM,KAAf,aACA,YAAC,IAAD,CAAWA,KAAM,IAAKC,SAAU,IAAWM,MAAM,YAAjD,iCACiC,IAC/B,YAAC,IAAD,CACEL,GAAG,IACHC,KAAK,6BACLC,OAAO,SACPC,IAAI,sBACJC,WAAY,IACZC,MAAM,iBANR,iBASO,IAXT,kJAcmB,+BAdnB,uHAgB+B,oCAhB/B,mMAwBN,YAAC,IAAD,CAAST,MAAM,YACb,YAAC,IAAD,CAAQU,MAAO,CAAEZ,EAAG,EAAOC,GAAI,KAC7B,YAAC,OAAD,CAAMY,GAAG,WACP,YAAC,IAAD,CAAKC,EAAG,CAAEd,EAAG,WAAYC,GAAI,YAAcc,GAAG,iBAC5C,YAAC,IAAD,CAAQb,MAAM,YACZ,YAAC,IAAD,CAAME,KAAM,IAAKO,MAAM,YAAvB,gBAGA,YAAC,IAAD,CAASP,KAAM,KAAf,aAKR,YAAC,IAAD,CAAQQ,MAAO,CAAEZ,EAAG,EAAOC,GAAI,KAC7B,YAAC,OAAD,CAAMY,GAAG,KACP,YAAC,IAAD,CAAKC,EAAG,CAAEd,EAAG,WAAYC,GAAI,YAAcc,GAAG,gBAC5C,YAAC,IAAD,CAAQb,MAAM,YACZ,YAAC,IAAD,CAAME,KAAM,IAAKO,MAAM,YAAvB,SAGA,YAAC,IAAD,CAASP,KAAM,KAAf","file":"component---src-pages-styles-js-7c38eaa5457e0c0d84b3.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport {\n  Box,\n  Column,\n  Columns,\n  Heading,\n  Paragraph,\n  SEO,\n  Text,\n  VStack,\n  Wrapper,\n} from \"components\"\n\nconst StylesPage = () => (\n  <>\n    <SEO\n      title=\"Styling - Field Gatsby Starter\"\n      description=\"Opinionated starter by Field for the Gatsby framework. Using dependencies like Emotion, styled-system, and Polished to deliver high quality and performant interfaces with a great developer experience.\"\n    />\n\n    <Wrapper pt={{ _: \"layout.5\", md: \"layout.6\" }}>\n      <VStack space={{ _: \"layout.5\", md: \"layout.6\" }} dividers={true}>\n        <Heading size={800}>Styles</Heading>\n        <Paragraph size={600} maxWidth={960 / 1.25}>\n          Our method for styling elements in this project uses{\" \"}\n          <Box\n            as=\"a\"\n            href=\"https://emotion.sh/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            fontWeight={600}\n            color=\"brand.primary\"\n          >\n            Emotion\n          </Box>\n          , a library designed for writing css styles with JavaScript. It\n          provides powerful and predictable style composition in addition to a\n          great developer experience with features such as source maps, labels,\n          and testing utilities. Both string and object styles are supported.\n        </Paragraph>\n        <Columns space=\"layout.3\">\n          <Column width={{ _: 1 / 1, md: 1 / 2 }}>\n            <VStack space=\"layout.1\">\n              <Heading size={600}>Labeling</Heading>\n              <Paragraph size={400} maxWidth={960 / 2.5} color=\"text.alt\">\n                Because Emotion abstracts away most traditional CSS classes, we\n                use HTML <code>data-*</code> attributes to label components so\n                that editors can easily identify what elements are what\n                components in the DOM. We do this by assigning components{\" \"}\n                <code>data-component-id=\"componentName\"</code> attributes. These\n                are great for element-associated metadata and have{\" \"}\n                <Box\n                  as=\"a\"\n                  href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  fontWeight={600}\n                  color=\"brand.primary\"\n                >\n                  little to no performance overhead\n                </Box>\n                .\n              </Paragraph>\n            </VStack>\n          </Column>\n          <Column width={{ _: 1 / 1, md: 1 / 2 }}>\n            <VStack space=\"layout.1\">\n              <Heading size={600}>Extending</Heading>\n              <Paragraph size={400} maxWidth={960 / 2.5} color=\"text.alt\">\n                To expand upon Emotion, we use{\" \"}\n                <Box\n                  as=\"a\"\n                  href=\"https://styled-system.com/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  fontWeight={600}\n                  color=\"brand.primary\"\n                >\n                  styled-system\n                </Box>{\" \"}\n                which provides us with \"style props for rapid UI development.\"\n                We're able to assign most of the typically styles we use to a\n                component called <code>Box</code> which we can then use as a\n                starting point for new components. This allows us to write\n                shorthand CSS and access our <code>Theme.js</code> variables\n                providing consistent spacing, colours, fonts, type styles, and\n                breakpoints. Style prop definitions automatically generate into\n                CSS classes that are assigned to their components.\n              </Paragraph>\n            </VStack>\n          </Column>\n        </Columns>\n        <Columns space=\"layout.1\">\n          <Column width={{ _: 1 / 1, md: 1 / 2 }}>\n            <Link to=\"/pages/\">\n              <Box p={{ _: \"layout.1\", md: \"layout.3\" }} bg=\"brand.primary\">\n                <VStack space=\"layout.5\">\n                  <Text size={300} color=\"text.alt\">\n                    How it works\n                  </Text>\n                  <Heading size={700}>Pages</Heading>\n                </VStack>\n              </Box>\n            </Link>\n          </Column>\n          <Column width={{ _: 1 / 1, md: 1 / 2 }}>\n            <Link to=\"/\">\n              <Box p={{ _: \"layout.1\", md: \"layout.3\" }} bg=\"surface.wash\">\n                <VStack space=\"layout.5\">\n                  <Text size={300} color=\"text.alt\">\n                    Index\n                  </Text>\n                  <Heading size={700}>Home</Heading>\n                </VStack>\n              </Box>\n            </Link>\n          </Column>\n        </Columns>\n      </VStack>\n    </Wrapper>\n  </>\n)\n\nexport default StylesPage\n"],"sourceRoot":""}